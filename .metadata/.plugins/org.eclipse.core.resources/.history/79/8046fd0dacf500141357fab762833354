display.setStatusBar(display.HiddenStatusBar)

local composer = require( "composer" )
local scene = composer.newScene()

local W = display.contentWidth
local H = display.contentHeight
local centerY = display.contentCenterY
local centerX = display.contentCenterX
local screenLeft = display.screenOriginX
local screenWidth = display.viewableContentWidth - screenLeft * 2
local screenRight = screenLeft + screenWidth
local screenTop = display.screenOriginY
local screenHeight = display.viewableContentHeight - screenTop * 2
local screenBottom = screenTop + screenHeight
local screenTopSB = screenTop + display.topStatusBarContentHeight
local screenHeightSB = display.viewableContentHeight - screenTopSB
local screenBottomSB = screenTopSB + screenHeightSB

local perspective = require("perspective")
local sound = require("sounds")
local loading, camera

-- -----------------------------------------------------------------------------------------------------------------
-- All code outside of the listener functions will only be executed ONCE unless "composer.removeScene()" is called.
-- -----------------------------------------------------------------------------------------------------------------

-- local forward references should go here

-- -------------------------------------------------------------------------------

-- "scene:create()"
function scene:create( event )

    local sceneGroup = self.view
    --camera = perspective.createView()

    -- Initialize the scene here.
    -- Example: add display objects to "sceneGroup", add touch listeners, etc.
    
    local transition = display.newImageRect(sceneGroup, "levelSel/level1.png", 1425, 900)
    transition.x = W/2
    transition.y = H/2
    --camera:add(transition, 2)
    
    loading = display.newText(sceneGroup, "Loading", W/2 - 100, H/2 + 300, "Soup Of Justice", 48)
    loading:setFillColor(1, 1, 1)
    loading.alpha = 1
    loading.anchorX = 0
    --camera:add(loading, 1)
    
   --camera:setParallax(1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3)
    
end


-- "scene:show()"
function scene:show( event )

    local sceneGroup = self.view
    local phase = event.phase
    
    if ( phase == "will" ) then
        -- Called when the scene is still off screen (but is about to come on screen).
        
        local getPrev = composer.getPrevious()
        if getPrev ~= nil then
          composer.removeScene(getPrev)
        end
    
    elseif ( phase == "did" ) then
        -- Called when the scene is now on screen.
        -- Insert code here to make the scene come alive.
        -- Example: start timers, begin animation, play audio, etc.
        
        
        
        local function textIteration()
          if loading.text == "Loading" then
          
            loading:removeSelf()
            loading = nil
            
            --transition.to(loading, {time = 200, text = "Loading.", onComplete = textIteration})
            
            loading = display.newText(sceneGroup, "Loading.", W/2 - 100, H/2 + 300, "Soup Of Justice", 48)
            loading:setFillColor(1, 1, 1)
            loading.alpha = 1
            loading.anchorX = 0
            --camera:add(loading, 1)
            
            --timer.performWithDelay(3000, textIteration)
          end
          
          if loading.text == "Loading." then
          
            loading:removeSelf()
            loading = nil
            
            --transition.to(loading, {time = 200, text = "Loading..", onComplete = textIteration})
            
            loading = display.newText(sceneGroup, "Loading..", W/2 - 100, H/2 + 300, "Soup Of Justice", 48)
            loading:setFillColor(1, 1, 1)
            loading.alpha = 1
            loading.anchorX = 0 
            
            timer.performWithDelay(3000, textIteration)
          end
          
          if loading.text == "Loading.." then
          
            loading:removeSelf()
            loading = nil
            
            --transition.to(loading, {time = 200, text = "Loading..", onComplete = textIteration})
            
            loading = display.newText(sceneGroup, "Loading...", W/2 - 100, H/2 + 300, "Soup Of Justice", 48)
            loading:setFillColor(1, 1, 1)
            loading.alpha = 1
            loading.anchorX = 0
            
            timer.performWithDelay(3000, textIteration)
          end
          
          if loading.text == "Loading..." then
          
            loading:removeSelf()
            loading = nil
            
            --transition.to(loading, {time = 200, text = "Loading..", onComplete = textIteration})
            
            loading = display.newText(sceneGroup, "Loading....", W/2 - 100, H/2 + 300, "Soup Of Justice", 48)
            loading:setFillColor(1, 1, 1)
            loading.alpha = 1
            loading.anchorX = 0
            
            timer.performWithDelay(3000, textIteration)
          end
          
          if loading.text == "Loading...." then
          
            loading:removeSelf()
            loading = nil
            
            --transition.to(loading, {time = 200, text = "Loading..", onComplete = textIteration})
            
            loading = display.newText(sceneGroup, "Loading", W/2 - 100, H/2 + 300, "Soup Of Justice", 48)
            loading:setFillColor(1, 1, 1)
            loading.alpha = 1
            loading.anchorX = 0
            
            timer.performWithDelay(3000, textIteration)
          end
        end
        
        timer.performWithDelay(3000, textIteration)
        
        --composer.loadScene( "playGame" )
        --transition.to(loading, {time = 200, text = "Loading.", onComplete = textIteration})

        --local function goTo()
          --composer.gotoScene( "playGame" )
        --end

        --timer.performWithDelay(15000, goTo)
        
        --camera.damping = 10 -- A bit more fluid tracking
        --camera:setFocus(loading) -- Set the focus to the player
        --camera:track() -- Begin auto-tracking 
         
    end
end


-- "scene:hide()"
function scene:hide( event )

    local sceneGroup = self.view
    local phase = event.phase

    if ( phase == "will" ) then
        -- Called when the scene is on screen (but is about to go off screen).
        -- Insert code here to "pause" the scene.
        -- Example: stop timers, stop animation, stop audio, etc.
        
    elseif ( phase == "did" ) then
        -- Called immediately after scene goes off screen.
        camera:destroy()
    end
end


-- "scene:destroy()"
function scene:destroy( event )

    local sceneGroup = self.view

    -- Called prior to the removal of scene's view ("sceneGroup").
    -- Insert code here to clean up the scene.
    -- Example: remove display objects, save state, etc.
    
end


-- -------------------------------------------------------------------------------

-- Listener setup
scene:addEventListener( "create", scene )
scene:addEventListener( "show", scene )
scene:addEventListener( "hide", scene )
scene:addEventListener( "destroy", scene )

-- -------------------------------------------------------------------------------

return scene