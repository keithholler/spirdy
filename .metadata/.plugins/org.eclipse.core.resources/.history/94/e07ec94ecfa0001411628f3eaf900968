system.getInfo("model")

display.setStatusBar(display.HiddenStatusBar)

local composer = require( "composer" )

local scene = composer.newScene()

local widget = require("widget")
local music = require("bgMusic")

local centerY = display.contentCenterY
local centerX = display.contentCenterX
local screenLeft = display.screenOriginX
local screenWidth = display.viewableContentWidth - screenLeft * 2
local screenRight = screenLeft + screenWidth
local screenTop = display.screenOriginY
local screenHeight = display.viewableContentHeight - screenTop * 2
local screenBottom = screenTop + screenHeight
local screenTopSB = screenTop + display.topStatusBarContentHeight
local screenHeightSB = display.viewableContentHeight - screenTopSB
local screenBottomSB = screenTopSB + screenHeightSB


-- -----------------------------------------------------------------------------------------------------------------
-- All code outside of the listener functions will only be executed ONCE unless "composer.removeScene()" is called.
-- -----------------------------------------------------------------------------------------------------------------

-- local forward references should go here

-- -------------------------------------------------------------------------------
local function onButtonRelease(event)
  local go = event.target.id
  if go == "quit" then
    composer.gotoScene("mainMenuBack")
    music.mmSound()
  elseif go =="levelSel" then
    composer.gotoScene("levelSelNorm")
    music.mmSound()
  elseif go =="retry" then
    composer.gotoScene("playGame")
  end
end
-- "scene:create()"
function scene:create( event )

    local sceneGroup = self.view

    -- Initialize the scene here.
    -- Example: add display objects to "sceneGroup", add touch listeners, etc.
    
    local tran = display.newImageRect("transition.png", 800, 400)
    tran.x = centerX
    tran.y = centerY
    tran.alpha = 0.3
   
    local gameOverMenu = display.newImageRect("gameOver/gameOverMenu.png", 528, 295)
    gameOverMenu.x = 800
    gameOverMenu.y = centerY
    gameOverMenu.alpha = 0
    
    local gemText = display.newImageRect("gameOver/gemsText.png", 136, 73)
    gemText.x = 400
    gemText.y = centerY
    gemText.alpha = 0
    
    local timeText = display.newImageRect("gameOver/timeText.png", 132, 72)
    timeText.x = 400
    timeText.y = 120
    timeText.alpha = 0
    
    local coinText = display.newImageRect("gameOver/coinText.png", 134, 76)
    coinText.x = 400
    coinText.y = 280
    coinText.alpha = 0
    
    local retryBtn = widget.newButton({width = 200, height = 77, defaultFile = "gameOver/restartBtn.png", id = "retry", onRelease = onButtonRelease})
    retryBtn.x = 600
    retryBtn.y = 110
    retryBtn.alpha = 0
   
    local levelBtn = widget.newButton({width = 201, height = 81, defaultFile = "gameOver/levelSelBtn.png", id = "levelSel", onRelease = onButtonRelease})
    levelBtn.x = 600
    levelBtn.y = centerY
    levelBtn.alpha = 0
    
    local quitBtn = widget.newButton({width = 201, height = 76, defaultFile = "gameOver/mainMenuBtn.png", id = "quit", onRelease = onButtonRelease})
    quitBtn.x = 600
    quitBtn.y = 290
    quitBtn.alpha = 0
    
    transition.to(gameOverMenu, {time = 1500, x = 450, alpha = 1})
    transition.to(gemText, {delay = 1500, time = 1000, alpha = 1})
    transition.to(timeText, {delay = 1500, time = 1000, alpha = 1})
    transition.to(coinText, {delay = 1500, time = 1000, alpha = 1})
    transition.to(retryBtn, {delay = 1500, time = 1000, alpha = 1})
    transition.to(levelBtn, {delay = 1500, time = 1000, alpha = 1})
    transition.to(quitBtn, {delay = 1500, time = 1000, alpha = 1})
    
    sceneGroup:insert(tran)
    sceneGroup:insert(gameOverMenu)
    sceneGroup:insert(quitBtn)
    sceneGroup:insert(levelBtn)
    sceneGroup:insert(retryBtn)
    sceneGroup:insert(coinText)
    sceneGroup:insert(timeText)
    sceneGroup:insert(gemText)
end


-- "scene:show()"
function scene:show( event )

    local sceneGroup = self.view
    local phase = event.phase
   
    if ( phase == "will" ) then
        -- Called when the scene is still off screen (but is about to come on screen).
        
    composer.removeScene("playGame")
    
    elseif ( phase == "did" ) then
        -- Called when the scene is now on screen.
        -- Insert code here to make the scene come alive.
        -- Example: start timers, begin animation, play audio, etc.
    end
end


-- "scene:hide()"
function scene:hide( event )

    local sceneGroup = self.view
    local phase = event.phase

    if ( phase == "will" ) then
        -- Called when the scene is on screen (but is about to go off screen).
        -- Insert code here to "pause" the scene.
        -- Example: stop timers, stop animation, stop audio, etc.
    elseif ( phase == "did" ) then
        -- Called immediately after scene goes off screen.
    end
end


-- "scene:destroy()"
function scene:destroy( event )

    local sceneGroup = self.view

    -- Called prior to the removal of scene's view ("sceneGroup").
    -- Insert code here to clean up the scene.
    -- Example: remove display objects, save state, etc.
    
end


-- -------------------------------------------------------------------------------

-- Listener setup
scene:addEventListener( "create", scene )
scene:addEventListener( "show", scene )
scene:addEventListener( "hide", scene )
scene:addEventListener( "destroy", scene )

-- -------------------------------------------------------------------------------

return scene