system.getInfo("model")

display.setStatusBar(display.HiddenStatusBar)


local centerY = display.contentCenterY
local centerX = display.contentCenterX

local composer = require( "composer" )

local scene = composer.newScene()
local particles = require("particleEffects")
-- -----------------------------------------------------------------------------------------------------------------
-- All code outside of the listener functions will only be executed ONCE unless "composer.removeScene()" is called.
-- -----------------------------------------------------------------------------------------------------------------

-- local forward references should go here

-- -------------------------------------------------------------------------------
local function mmMusic()
  local musicOn = require("bgMusic")
  musicOn.mmSound()
end

-- "scene:create()"
function scene:create( event )

    local sceneGroup = self.view
    local group = display.newGroup()
    group:insert(sceneGroup)
    
    -- Initialize the scene here.
    -- Example: add display objects to "sceneGroup", add touch listeners, etc.
         local bg = display.newImageRect("nebula.png", 820, 820)
         bg.x = centerX
         bg.y = centerY
         bg.alpha = 0
         
         local bg2 = display.newImageRect("bgstars2.png", 820, 820)
         bg2.x = centerX
         bg2.y = centerY
         bg2.alpha = 0
         
         local bg3 = display.newImageRect("bgstars1.png", 700, 700)
         bg3.x = centerX
         bg3.y = centerY
         bg3.alpha = 0
         
         local bg4 = display.newImageRect("planets.png", 820, 820)
         bg4.x = centerX
         bg4.y = centerY
         bg4.alpha = 0
         
         local function bgRemove()
           bg:removeSelf()
           bg = nil
         end
         
         transition.to(bg, {time = 3000, alpha = 1})
         transition.to(bg2, {time = 3000, alpha = 1})
         transition.to(bg3, {time = 3000, alpha = 1})
         transition.to(bg4, {time = 3000, alpha = 1})
         
         sceneGroup:insert(bg)
         sceneGroup:insert(bg2)
         sceneGroup:insert(bg3)
         sceneGroup:insert(bg4)
         
           local function rotateImg()
            
             transition.to(bg, {rotation = bg.rotation -360, time = 40000, onComplete = rotateImg })
             
           end
           
           local function rotateImg2()
           
            transition.to(bg2, {rotation = bg2.rotation -360, time = 27000, onComplete = rotateImg2 })
           
           end
           
           local function rotateImg3()
           
            transition.to(bg3, {rotation = bg3.rotation -360, time = 24000, onComplete = rotateImg3 })
           
           end
           
           local function rotateImg4()
           
            transition.to(bg4, {rotation = bg4.rotation -360, time = 22000, onComplete = rotateImg4 })
           
           end
          
          transition.to(bg, {time = 40000, rotation = -360, onComplete = rotateImg})
          transition.to(bg2, {time = 27000, rotation = -360, onComplete = rotateImg2})
          transition.to(bg3, {time = 24000, rotation = -360, onComplete = rotateImg3})
          transition.to(bg4, {time = 22000, rotation = -360, onComplete = rotateImg4})
          
          
end


-- "scene:show()"
function scene:show( event )

    local sceneGroup = self.view
    local phase = event.phase
    local group = display.newGroup()
    group:insert(sceneGroup)
    
    if ( phase == "will" ) then
        -- Called when the scene is still off screen (but is about to come on screen).
        mmMusic() 
        particles.mainMenu()
         
    elseif ( phase == "did" ) then
        -- Called when the scene is now on screen.
        -- Insert code here to make the scene come alive.
        -- Example: start timers, begin animation, play audio, etc.
        composer.gotoScene("mainMenu")
    end
end


-- "scene:hide()"
function scene:hide( event )

    local sceneGroup = self.view
    local phase = event.phase

    if ( phase == "will" ) then
        -- Called when the scene is on screen (but is about to go off screen).
        -- Insert code here to "pause" the scene.
        -- Example: stop timers, stop animation, stop audio, etc.
    elseif ( phase == "did" ) then
        -- Called immediately after scene goes off screen.
    end
end


-- "scene:destroy()"
function scene:destroy( event )

    local sceneGroup = self.view

    -- Called prior to the removal of scene's view ("sceneGroup").
    -- Insert code here to clean up the scene.
    -- Example: remove display objects, save state, etc.
end


-- -------------------------------------------------------------------------------

-- Listener setup
scene:addEventListener( "create", scene )
scene:addEventListener( "show", scene )
scene:addEventListener( "hide", scene )
scene:addEventListener( "destroy", scene )

-- -------------------------------------------------------------------------------

return scene