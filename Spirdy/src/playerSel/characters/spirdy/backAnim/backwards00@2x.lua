-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{ 
		
		["backwards00@2x"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   35, -143  ,  13, -146  ,  32, -164  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   92, 59  ,  45, 18  ,  63, 11  ,  105, 27  ,  116, 49  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   60, -3  ,  61, -34  ,  87, -31  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -44, -69  ,  -88, 3  ,  -132, -21  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   13, -146  ,  -30, -138  ,  -17, -152  ,  15, -161  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -30, -138  ,  -37, -135  ,  -45, -146  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   60, -3  ,  45, 18  ,  41, -49  ,  61, -34  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -80, 40  ,  41, 105  ,  66, 125  ,  62, 136  ,  -17, 135  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   53, -112  ,  41, -49  ,  -30, -138  ,  13, -146  ,  35, -143  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   45, 18  ,  60, -3  ,  63, 11  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   41, 105  ,  28, 55  ,  45, 82  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   46, -74  ,  57, -91  ,  70, -96  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   46, -74  ,  53, -112  ,  58, -116  ,  57, -91  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -44, -69  ,  41, 105  ,  -80, 40  ,  -88, 3  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -37, -135  ,  -30, -138  ,  28, 55  ,  41, 105  ,  -44, -69  ,  -48, -92  ,  -48, -113  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 0, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   28, 55  ,  -30, -138  ,  41, -49  ,  45, 18  }
                    }
                    
                    
                    
		}
		
	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end
	
	function physics:get(name)
		return unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end
	
	return physics;
end

return M

